#!/home/nsharunenko/.rvm/rubies/ruby-1.9.3-p286/bin/ruby

require 'thor'
require 'json'
require 'open-uri'

class SolrHammer < Thor
  desc "solr URL:PORT","run requests against the solr server"
  method_option :dictionary, :aliases => "-d", :default => "words.dict", :desc => "File containing list of words to use for solr searches"
  method_option :core, :aliases => "-c", :default => "test", :desc => "Specify Solr core to run the test against"

  def solr(url_port)

    @dictionary_file = options[:dictionary]

    # Removing the dictionary file if it is empty
    if File.zero?(@dictionary_file)
      say "blank #{@dictionary_file} removed", :red
      File.delete(@dictionary_file)
    end

    # Process the dictionary option
    case @dictionary_file
    when "words.dict"
      if File.exists?(@dictionary_file)
        say "File #{@dictionary_file} already exists, processing it", :green
      else
        say "Default 'words.dict' file is not found", :yellow
        invoke :dictionary, []
      end
    else
        say "You gave me non-default file to process: #{@dictionary_file}", :green
    end
    
    # Process the core option, ensure only allowed ones are accepted
    case options[:core]
    when "test", "dev", "staging", "pharos"
      @core = options[:core]
    else
      @core = "test"
    end

    # The actual script that executes the searches
    say "Sending requests to your Solr server. This might take some time.", :green
    File.open(@dictionary_file, "r").each do |word|
      word = word.strip
      url = "http://#{url_port}/solr/#{@core}/select?q=#{word.strip}&wt=json"
        open(url) do |request|
          json = JSON.parse(request.read)

          open('response.log', 'a+'){ |f|
            f.puts "#{word} => #{json["response"]["numFound"]}" +  " | HTTP: #{request.status}" +  " | Solr responseHeader: #{json["responseHeader"]["status"]}"
          }
      end
    end
    say "Processing complete. Please review your 'response.log' file.", :green
  end

  desc "dictionary", "populate your dictionary file with terms to search for on the solr server (default: 100)"
  method_option :number, :aliases => "-n", :default => "100", :desc => "Supply the number of words to copy into your dictionary file"

  def dictionary
    say "Populating your dictionary file with #{options[:number]} terms", :green
    @system_dictionary = "cat words | head -#{options[:number]} > words.dict"
    # unzip provided words.zip
    system 'unzip -qq words.zip'
    # execute the words.dict file population
    system @system_dictionary 
    # cleanup by removing the extracted words file
    system 'rm words'
  end
end

SolrHammer.start
